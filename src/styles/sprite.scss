// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$check-name: 'check';
$check-x: 0px;
$check-y: 68px;
$check-offset-x: 0px;
$check-offset-y: -68px;
$check-width: 15px;
$check-height: 12px;
$check-total-width: 88px;
$check-total-height: 80px;
$check-image: '../img/sprite.png';
$check: (0px, 68px, 0px, -68px, 15px, 12px, 88px, 80px, '../img/sprite.png', 'check', );
$icon-basket-name: 'icon-basket';
$icon-basket-x: 0px;
$icon-basket-y: 0px;
$icon-basket-offset-x: 0px;
$icon-basket-offset-y: 0px;
$icon-basket-width: 40px;
$icon-basket-height: 34px;
$icon-basket-total-width: 88px;
$icon-basket-total-height: 80px;
$icon-basket-image: '../img/sprite.png';
$icon-basket: (0px, 0px, 0px, 0px, 40px, 34px, 88px, 80px, '../img/sprite.png', 'icon-basket', );
$icon-close-name: 'icon-close';
$icon-close-x: 0px;
$icon-close-y: 39px;
$icon-close-offset-x: 0px;
$icon-close-offset-y: -39px;
$icon-close-width: 24px;
$icon-close-height: 24px;
$icon-close-total-width: 88px;
$icon-close-total-height: 80px;
$icon-close-image: '../img/sprite.png';
$icon-close: (0px, 39px, 0px, -39px, 24px, 24px, 88px, 80px, '../img/sprite.png', 'icon-close', );
$icon-map-name: 'icon-map';
$icon-map-x: 45px;
$icon-map-y: 0px;
$icon-map-offset-x: -45px;
$icon-map-offset-y: 0px;
$icon-map-width: 43px;
$icon-map-height: 26px;
$icon-map-total-width: 88px;
$icon-map-total-height: 80px;
$icon-map-image: '../img/sprite.png';
$icon-map: (45px, 0px, -45px, 0px, 43px, 26px, 88px, 80px, '../img/sprite.png', 'icon-map', );
$icon-pointer-name: 'icon-pointer';
$icon-pointer-x: 57px;
$icon-pointer-y: 39px;
$icon-pointer-offset-x: -57px;
$icon-pointer-offset-y: -39px;
$icon-pointer-width: 22px;
$icon-pointer-height: 11px;
$icon-pointer-total-width: 88px;
$icon-pointer-total-height: 80px;
$icon-pointer-image: '../img/sprite.png';
$icon-pointer: (57px, 39px, -57px, -39px, 22px, 11px, 88px, 80px, '../img/sprite.png', 'icon-pointer', );
$icon-search-name: 'icon-search';
$icon-search-x: 29px;
$icon-search-y: 39px;
$icon-search-offset-x: -29px;
$icon-search-offset-y: -39px;
$icon-search-width: 23px;
$icon-search-height: 23px;
$icon-search-total-width: 88px;
$icon-search-total-height: 80px;
$icon-search-image: '../img/sprite.png';
$icon-search: (29px, 39px, -29px, -39px, 23px, 23px, 88px, 80px, '../img/sprite.png', 'icon-search', );
$spritesheet-width: 88px;
$spritesheet-height: 80px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($check, $icon-basket, $icon-close, $icon-map, $icon-pointer, $icon-search, );
$spritesheet: (88px, 80px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
